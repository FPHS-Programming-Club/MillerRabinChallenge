import miller_rabin, os.path, sys, time

# DO NOT EDIT THIS FILE!!!
# This file contains the testing scripts for the program.
# The file you should edit is "miller_rabin.py"
def main():
    argc = len(sys.argv)
    if argc == 3:
        min = int(sys.argv[1])
        max = int(sys.argv[2])
        ranged_run(min, max)
    elif argc == 2:
        number = int(sys.argv[1])
        single_run(number)
    else:
        number_str = input("Enter number to evaluate, or 'r' to specify a range of numbers.\n > ")

        if number_str == "r":
            min = int(input("Min > "))
            max = int(input("Min > "))
            ranged_run(min, max)
        else: single_run(int(number_str))

def single_run(number: int):
    # Evaluate a single number.
    print("Evaluating...", end="")

    start = time.time_ns()
    prime = miller_rabin.is_prime(number)
    end = time.time_ns()

    time_sec = (end - start) * 1e-9
    if prime: print(f" \x1b[1;32mPRIME\x1b[0m {time_sec:0.000000} sec.")
    else: print(f" \x1b[1;31mNOT PRIME\x1b[0m {time_sec:0.000000} sec.")

    put_result(number, prime, time_sec)

def ranged_run(run_start: int, run_end: int):
    # Evaluate a group of numbers, from `runStart` to `runEnd`.
    print("Evaluating...")

    for num in range(run_start, run_end + 1):
        print(f"{num}...", end="")
        start = time.time_ns()
        prime = miller_rabin.is_prime(num)
        end = time.time_ns()

        time_sec = (end - start) * 1e-9
        if prime: print(f" \x1b[1;32mPRIME\x1b[0m {time_sec:0.000000} sec.")
        else: print(f" \x1b[1;31mNOT PRIME\x1b[0m {time_sec:0.000000} sec.")

        put_result(num, prime, time_sec)
        

def put_result(number: int, result: bool, time: float):
    # Put a result in the debug file. Don't worry, this isn't included
    # when calculating the time.
    FILE_PATH = "timings.csv"

    if os.path.isfile(FILE_PATH):
        output = open(FILE_PATH, "a")
        output.write(f"{number},{result},{time}\n")
    else:
        output = open(FILE_PATH, "a")
        output.write( "Number,Result,Time\n" +
                     f"{number},{result},{time}\n")
    output.close()

if __name__ == "__main__": main()
