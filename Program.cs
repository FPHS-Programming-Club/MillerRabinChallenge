namespace MillerRabinChallenge;

// DO NOT EDIT THIS FILE!!!
// This file contains the testing scripts for the program.
// The file you should edit is "MillerRabin.cs"
public static class Program
{
    public static void Main(string[] args)
    {
        if (args.Length == 2)
        {
            long min = long.Parse(args[0]),
                 max = long.Parse(args[1]);
            RangedRun(min, max);
        }
        else if (args.Length == 1)
        {
            long number = long.Parse(args[0]);
            SingleRun(number);
        }
        else
        {
            Console.Write("Enter number to evaluate, or 'r' to specify a range of numbers.\n > ");
            string numberStr = Console.ReadLine()!;

            if (numberStr == "r")
            {
                Console.Write("Min > ");
                long min = long.Parse(Console.ReadLine()!);
                Console.Write("Max > ");
                long max = long.Parse(Console.ReadLine()!);
                RangedRun(min, max);
            }
            else SingleRun(long.Parse(numberStr));
        }
    }

    public static void SingleRun(long number)
    {
        // Evaluate a single number.
        Console.Write("Evaluating...");

        DateTime start = DateTime.Now, end;
        bool prime = MillerRabin.IsPrime(number);
        end = DateTime.Now;

        TimeSpan time = end - start;
        if (prime) Console.WriteLine($" \x1b[1;32mPRIME\x1b[0m {time.TotalSeconds:0.000000} sec.");
        else Console.WriteLine($" \x1b[1;31mNOT PRIME\x1b[0m {time.TotalSeconds:0.000000} sec.");

        PutResult(number, prime, time);
    }
    public static void RangedRun(long runStart, long runEnd)
    {
        // Evaluate a group of numbers, from `runStart` to `runEnd`.
        Console.WriteLine("Evaluating...");

        DateTime start, end;
        bool prime;
        for (long num = runStart; num <= runEnd; num++)
        {
            Console.Write($"{num}...");
            start = DateTime.Now;
            prime = MillerRabin.IsPrime(num);
            end = DateTime.Now;

            TimeSpan time = end - start;
            if (prime) Console.WriteLine($" \x1b[1;32mPRIME\x1b[0m {time.TotalSeconds:0.000000} sec.");
            else Console.WriteLine($" \x1b[1;31mNOT PRIME\x1b[0m {time.TotalSeconds:0.000000} sec.");

            PutResult(num, prime, time);
        }
    }

    private static void PutResult(long number, bool result, TimeSpan time)
    {
        // Put a result in the debug file. Don't worry, this isn't included
        // when calculating the time.
        const string filePath = "timings.csv";

        if (File.Exists(filePath))
        {
            StreamWriter writer = new(filePath, true);
            writer.WriteLine($"{number},{result},{time.TotalSeconds}");
            writer.Close();
        }
        else
        {
            StreamWriter writer = new(filePath, true);
            writer.WriteLine( "Number,Result,Time\n" +
                             $"{number},{result},{time.TotalSeconds}");
            writer.Close();
        }
    }
}
